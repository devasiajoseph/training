#+STYLE: <link rel="stylesheet" type="text/css" href="css/bootstrap/css/bootstrap.min.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="css/custom.css" />
#+TITLE: Clojure Training

* Intro to Functional Programming with Clojure

** What is functional programming
   Functions are first class objects
    - It can be created on demand.
    - It can be stored in a data structure.
    - It can be passed as an argument to a function.
    - It can be returned as the value of a function.

*** Why do we need functional programming?

    
    In computer science, functional programming is a programming paradigm style of building the structure and elements of computer programs that treats computation as the evaluation of
    mathematical functions and avoids changing-state and mutable data.

    Functional programming makes it easy to implement distributed/parallel computing.
    
    Moore's law for computing hardware is fluctuating. Processors are not getting faster anymore.
    More efficient computing is achieved by adding more cores.


** Higher order functions
   Functions that can take functions or values as an input and return a new function or functions as output.
   
** Anonymous Functions
   Anonymous functtions are functions without an identity or a name.
   These type of functions are commonly used as callbacks for an event where no other reference is needed.
   Another use case for anonymous functions is using it as a filter for a data set or applying a functional transformation for a set of data
   
** Functional composition
   "Function Composition" is applying one function to the results of another.
   You can have a pipe line of functions through which data is passed through. And this pipe line can be termed as a new function.
   You can create a new function from a set of functions.

** Pure functions and immutablilty

   Pure function is a function which has no side effects. It does not depend on any external entities.
   For every input, there is only one out put
   Example: Area of a circle = pi*r*r
   
   Examples of impure functions: current time, or time related functions. Database operations. File operations or reading data from an external API
   
   
** Map Reduce Filter

   Map reduce is a programming model. A map reduce approach helps in distributed computing.

*** Map
    Common syntax:
    
    map->function->data set

    Outputs a set of data
    
    Function in a map accepts a value or another function.

    Example case: Increment every value in an array by one

    syntax: map increment-function array
   
*** Reduce
    Common syntax:

    reduce->function <optional initial value> -> data set
    
    Reduce function accepts two values, previous value and next value
    Returns a single output entity which is a reduced form of dataset
    
    

* Intoduction to Clojure

** What is Clojure
   Clojure is a general purpose, compiled, dynamic, functional programming language.
   Clojure is a member of the Lisp family of languages.
   Lisp was a revolutionary programming language which first appeared in 1958 and was too advanced at that time.
   Lisp was originally created as a practical mathematical notation for computer programs, influenced by lambda calculus
   
** Advantages of Clojure
   - Clojure is simple. *Simple is elegant, simple is beautiful.*
   - Clojure uses lesser lines of code. Anywhere between 10-20x lesser lines of code than Java.
   - Clojure is a Lisp. *Code is Data*
   - Clojure is functional *Functional programming will be a necessary programming model in the near future*
   - Clojure supports true concurrent models
   - Clojure REPL helps in interactive development
   - Clojure runs on JVM
     It can take advantage of highly optimized JVM and its garbage collector. It can utilize Java libraries
   - Clojure can be used as a replacement for javascript in the front end
   
   
   
** Disadvantages of Clojure
   - Major shift in programming model.
   - Lisp syntax is different and some people never gets it.
   - Relatively new technology. Released in 2007 and fewer libraries and developers
   
** Installing Clojure
   Using Leiningen http://leiningen.org/
   
   1. Download the lein script (or on Windows lein.bat)
   2. Place it on your $PATH where your shell can find it (eg. ~/bin)
   3. Set it to be executable (chmod a+x ~/bin/lein)
   4. Run it (lein) and it will download the self-install package
   
     #+BEGIN_SRC bash
     lein new <project-name>
     #+END_SRC
   This command will start a new project

** Tooling

*** IDE
    Clojure syntax is very simple that you don't actually need an IDE. You can do Clojure development in a simple text editor.
    
    Recommended editors/IDE:
    
    1. Emacs: *Unlimited awesomeness* https://www.gnu.org/software/emacs/
       Emacs is built with a Lisp. Highly customizable. Steeper learning curve.
    2. Cursive: *For the software engineer* https://cursive-ide.com/
    3. Eclipse + Counterclockwise *For the enterprise developer who is already working on Java* http://doc.ccw-ide.org/documentation.html
       
    
* Basic Clojure Syntax and REPL

** Lisp syntax
   Clojure is a homoiconic language, which means Clojure code itself is a data (list). Clojure code is executed by evaluating a data structure. Clojure code can modify, transform and create other Clojure programs.
   *Programs creating programs.*
   Recommended Reading for more enlightenment: http://clojure.org/reference/reader
   
** The REPL
   *The Read Eval Print Loop* 
   Clojure REPL is an interactive shell which can be connected to a running program and modifications can be made and tested on a live program.
   
   Staring a REPL
   
   cd into your project folder
    #+BEGIN_SRC bash
     lein repl
    #+END_SRC
   
   
** Code execution and Project Structure

    Creating a project:
    
     #+BEGIN_SRC bash
      lein new <project-name>
      #+END_SRC
    
    Running a project 

     #+BEGIN_SRC bash
      lein run
     #+END_SRC

    The "main" entry point will be executed.

    The main entry point is defined in the project.clj file in the project folder {:main tutorial.core}
    
    Clojure code is organized similar to JAVA projects
    

*** Source code
    Source code path is defined in project as {:source-paths ["src/clj"]}
    It is a common practice to put all the clojure source code inside "src/clj". 
    
    Clojure project may contain java source code or clojurescript source code. They will be put inside "src/java" or "src/cljs" directories.

    Java source code path must be defined using the key :java-source-paths
    Java source code path example :java-source-paths ["src/java"]
     
* Clojure Namespaces
  
  
** What is a namespace?
   
   Namespace is a structural identity of a source code file.
   
   - What def does
   - What namespaces are and how to use them
   - The relationship between namespaces and the filesystem
   - How to use refer, alias, require, use, and ns
   - How to organize Clojure projects using the filesystem

   
** The 'user' namespace
   When you start the REPL, for example, you are in the user namespace
   
** Using code in other namespaces
   - require (strict)
   - use (import everything into this namespace)
   - refer (refer particular functions only)
   
** require, use, and import

   #+BEGIN_SRC clojure
   (ns myproject.core
    (:use [clojure.core] :reload)
    (:require [clojure.string :as str :refer [replace]] :reload-all))

    (str/replace "foo" #"o" "e")
   "fee"
   #+END_SRC
   
** Reloading namespaces
   #+BEGIN_SRC bash
user=> (use '[clojure.tools.namespace.repl :only (refresh)])

user=> (refresh)

:reloading (namespace.app)

:ok

#+END_SRC
   
** The namespace declaration
   (ns directory-path.filename)
   
* TODO Working with Java Code & Clojure

** Importing Java packages
** Using static class members
** Creating objects
** Calling instance methods
   

* More Clojure Syntax

** Execution (do, doseq, dotimes)
   
   
    #+BEGIN_SRC clojure
       (do  something)
    #+END_SRC
   
   
   #+BEGIN_SRC clojure
   (doseq [each all]
     (do-something each))
   #+END_SRC


   #+BEGIN_SRC clojure
    (dotimes [n 5] (println "n is" n))
   #+END_SRC
     
** Conditionals (if, cond, condp, case)
   #+BEGIN_SRC clojure
   (if test then else?) 
   #+END_SRC
   
   OR
   
   #+BEGIN_SRC clojure
   (if test then)
   #+END_SRC

** Iteration (while, for, loop)
   
   #+BEGIN_SRC clojure
(while condition
(do-somthing))
   #+END_SRC

*for*

List comprehension. Takes a vector of one or more
 binding-form/collection-expr pairs, each followed by zero or more
 modifiers, and yields a lazy sequence of evaluations of expr.
 Collections are iterated in a nested fashion, rightmost fastest,
 and nested coll-exprs can refer to bindings created in prior
 binding-forms.  Supported modifiers are: :let [binding-form expr ...],
 :while test, :when test.
 (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))

#+BEGIN_SRC clojure
(for [x [0 1 2 3 4 5]
      :let [y (* x 3)]
      :when (even? y)]
  y)

#+END_SRC
   
** Recursion
   Factorial Example:
   
   #+BEGIN_SRC clojure
   (defn fact[x]
  (if (<= x 1) 1 (* x  (fact (- x 1))  )))
   #+END_SRC

   Use recursion only when no other way is possible. Most of the time you can use *reduce* operation to attain the same result

   Alternate way of implementing factorial without recursion:

   #+BEGIN_SRC clojure
(defn fact[n]
(if (= 0 n) 1 (reduce * (range 1 (inc n)))))
   #+END_SRC
   
** Tail recursion
   Factorial example:

   #+BEGIN_SRC clojure
   (defn fact [x]
    (loop [n x f 1]
        (if (= n 1)
            f
            (recur (dec n) (* f n)))))
   #+END_SRC
   
   Clojure will do tail-call optimization for this; that ensures that you will never run into StackOverflowErrors.
   
** Exception handling
   
   The exprs are evaluated and, if no exceptions occur, the value of the last
   is returned. If an exception occurs and catch clauses are provided, each is
   examined in turn and the first for which the thrown exception is an instance
   of the named class is considered a matching catch clause
   
   #+BEGIN_SRC clojure
   (try
     (/ 1 0)
     (catch Exception e (str "caught exception: " (.getMessage e))))
   #+END_SRC
   
** Destructuring

#+BEGIN_SRC bash
user=> (def point [5 7])
#'user/point

user=> (let [[x y] point]
         (println "x:" x "y:" y))
x: 5 y: 7
#+END_SRC

#+BEGIN_SRC clojure
Simply put, destructuring in Clojure is a way extract values from a datastructure and bind them to symbols,

without having to explicitly traverse the datstructure. It allows for elegant and concise Clojure code.

Vectors

Syntax: [symbol another-symbol] ["value" "another-value"]

(def my-vector [:a :b :c :d])
(def my-nested-vector [:a :b :c :d [:x :y :z]])

(let [[a b c d] my-vector]
  (println a b c d))
;; => :a :b :c :d

(let [[a _ _ d [x y z]] my-nested-vector]
  (println a d x y z))
;; => :a :d :x :y :z
You don't have to match the full vector.

(let [[a b c] my-vector]
  (println a b c))
;; => :a :b :c

;;You can use & the-rest to bind the remaining part of the vector to the-rest.

(let [[a b & the-rest] my-vector]
  (println a b the-rest))
;; => :a :b (:c :d)
;;When a destructuring form "exceeds" a vector (i.e. there not enough items in the vector to bind to), the excess symbols will be bound to nil.

(let [[a b c d e f g] my-vector]
  (println a b c d e f g))
;; => :a :b :c :d nil nil nil
;;You can use :as some-symbol as the last two items in the destructuring form to bind the whole vector to some-symbol

(let [[:as all] my-vector]
  (println all))
;; => [:a :b :c :d]

(let [[a :as all] my-vector]
  (println a all))
;; => :a [:a :b :c :d]

(let [[a _ _ _ [x y z :as nested] :as all] my-nested-vector]
  (println a x y z nested all))
;; => :a :x :y :z [:x :y :z] [:a :b :c :d [:x :y :z]]
;;You can use both & the-rest and :as some-symbol.

(let [[a b & the-rest :as all] my-vector]
  (println a b the-rest all))
;; => :a :b (:c :d) [:a :b :c :d]
;;Optional arguments for functions

;;With destructuring and the & the-rest form, you can specify optional arguments to functions.

(defn foo [a b & more-args]
  (println a b more-args))
(foo :a :b) ;; => :a :b nil
(foo :a :b :x) ;; => :a :b (:x)
(foo :a :b :x :y :z) ;; => :a :b (:x :y :z)

(defn foo [a b & [x y z]]
  (println a b x y z))
(foo :a :b) ;; => :a :b nil nil nil
(foo :a :b :x) ;; => :a :b :x nil nil
(foo :a :b :x :y :z) ;; => :a :b :x :y :z

;;Maps

;;Syntax: {symbol :key, another-symbol :another-key} {:key "value" :another-key "another-value"}

(def my-hashmap {:a "A" :b "B" :c "C" :d "D"})
(def my-nested-hashmap {:a "A" :b "B" :c "C" :d "D" :q {:x "X" :y "Y" :z "Z"}})

(let [{a :a d :d} my-hashmap]
  (println a d))
;; => A D

(let [{a :a, b :b, {x :x, y :y} :q} my-nested-hashmap]
  (println a b x y))
;; => A B X Y
;;Similar to vectors, if a key is not found in the map, the symbol will be bound to nil.

(let [{a :a, not-found :not-found, b :b} my-hashmap]
  (println a not-found b))
;; => A nil B
;;You can provide an optional default value for these missing keys with the :or keyword and a map of default values.

(let [{a :a, not-found :not-found, b :b, :or {not-found ":)"}} my-hashmap]
  (println a not-found b))
;; => A :) B
;;The :as some-symbol form is also available for maps, but unlike vectors it can be specified anywhere (but still preferred to be the last two pairs).

(let [{a :a, b :b, :as all} my-hashmap]
  (println a b all))
;; => A B {:a A :b B :c C :d D}
;;And combining :as and :or keywords (again, :as preferred to be the last).

(let [{a :a, b :b, not-found :not-found, :or {not-found ":)"}, :as all} my-hashmap]
  (println a b not-found all))
;; => A B :) {:a A :b B :c C :d D}
;;There is no & the-rest for maps.

;;Shortcuts

;;Having to specify {symbol :symbol} for each key is repetitive and verbose (it's almost always going to be the symbol equivalent of the key), so shortcuts are provided so you only have to type the symbol once.

;;Here are all the previous examples using the :keys keyword followed by a vector of symbols:

(let [{:keys [a d]} my-hashmap]
  (println a d))
;; => A D

(let [{:keys [a b], {:keys [x y]} :q} my-nested-hashmap]
  (println a b x y))
;; => A B X Y

(let [{:keys [a not-found b]} my-hashmap]
  (println a not-found b))
;; => A nil B

(let [{:keys [a not-found b], :or {not-found ":)"}} my-hashmap]
  (println a not-found b))
;; => A :) B

(let [{:keys [a b], :as all} my-hashmap]
  (println a b all))
;; => A B {:a A :b B :c C :d D}

(let [{:keys [a b not-found], :or {not-found ":)"}, :as all} my-hashmap]
  (println a b not-found all))
;; => A B :) {:a A :b B :c C :d D}
;;There are also :strs and :syms alternatives, for when your map has strings or symbols for keys (instead of keywords), respectively.

(let [{:strs [a d]} {"a" "A", "b" "B", "c" "C", "d" "D"}]
  (println a d))
;; => A D

(let [{:syms [a d]} {'a "A", 'b "B", 'c "C", 'd "D"}]
  (println a d))
;; => A D
;;Keyword arguments for function

;;Map destructuring also works with lists (but not vectors).

(let [{:keys [a b]} '("X", "Y", :a "A", :b "B")]
(println a b))
;; => A B
;;This allows your functions to have optional keyword arguments.

(defn foo [a b & {:keys [x y]}]
  (println a b x y))
(foo "A" "B")  ;; => A B nil nil
(foo "A" "B" :x "X")  ;; => A B X nil
(foo "A" "B" :x "X" :y "Y")  ;; => A B X Y

#+END_SRC
   
** Using keys and or Named arguments
   
#+BEGIN_SRC clojure

   (keys map)

#+END_SRC

Returns all keys of the map


Logical operators

(and cond1 cond2 ....)


(or cond1 cond2 ....)
   
* Macros

** Exploring Macros
   The number one rule of Macros: *Don't use macros*

   Most of the problems can be solved using functional programming. Use macros only if you need to create a DSL
   like a query language for a particular Database or a very specific functionality set that is repeated very often.

   99% of the time you don't need macros


   
 
** Creating our Own Macros
   
   Macro definitions look much like function definitions.
   They have a name, an optional document string, an argument list, and a body.
   The body will almost always return a list.
   This makes sense because macros are a way of transforming a data structure into a form Clojure can evaluate, and Clojure uses lists to represent function calls, special form calls, and macro calls.
   You can use any function, macro, or special form within the macro body, and you call macros just like you would a function or special form.

   #+BEGIN_SRC clojure
   (defmacro infix
    [infixed]
     (list (second infixed) (first infixed) (last infixed)))
   #+END_SRC


#+BEGIN_SRC clojure

(infix (1 + 1))
; => 2

#+END_SRC



   
** Using Templating to Create Macros
   
   Use: list quote..etc
   
* Data Structures
** The four basic structures:
** lists
   Everything is a list. Even clojure source code is a list
   
   enclosed in a ()
   
** vectors
   Similar to arrays.
   
   Example:
   [1 2 3 4 5]
   
** maps
   
   {:key value}
   
** sets

Sets are collections of unique values.

There is literal support for hash-sets:

#{:a :b :c :d}
-> #{:d :a :b :c}
You can create sets with the hash-set and sorted-set functions:

(hash-set :a :b :c :d)
-> #{:d :a :b :c}

(sorted-set :a :b :c :d)
-> #{:a :b :c :d}
You can also get a set of the values in a collection using the set function:


** Sequences
   
   A logical list
   
** Lazy Sequences

   
** Operations on sequences (eg map, reduce, filter)

   (map function sequence)

   (reduce function sequence)


   (filter function sequence)
   
** Design Considerations for Clojure programming
   
   - Keep it simple
   - Most of the time use pure functions
   - Avoid mutable states
   - Avoid circular dependencies
   
* Polymorphism
** Protocols
** Defining and using Types
** Defining and using Records
** Handling Java with interop


Clojure vector, set and list classes implement the java.util.Collection interface and ArrayList, HashSet and LinkedList can take a java.util.Collection constructor argument. So you can simply do:

#+BEGIN_SRC clojure

user=> (java.util.ArrayList. [1 2 3])
#<ArrayList [1, 2, 3]>
user=> (.get (java.util.ArrayList. [1 2 3]) 0)
1

#+END_SRC

Similarly, Clojure map class implements java.util.Map interface and HashMap takes a java.util.Map constructor argument. So:

#+BEGIN_SRC
user=> (java.util.HashMap. {"a" 1 "b" 2})
#<HashMap {b=2, a=1}>
user=> (.get (java.util.HashMap. {"a" 1 "b" 2}) "a")
1

#+END_SRC

You can also do the reverse and it is much easier:

#+BEGIN_SRC

ser=> (into [] (java.util.ArrayList. [1 2 3]))
[1 2 3]
user=> (into #{} (java.util.HashSet. #{1 2 3}))
#{1 2 3}
user=> (into '() (java.util.LinkedList. '(1 2 3)))
(3 2 1)
user=> (into {} (java.util.HashMap. {:a 1 :b 2}))
{:b 2, :a 1}
#+END_SRC

* Intro to Concurency



* Intro to Web Programming with Clojure
** Ring
   HTTP server abstraction
   
** Compojure
   
   URL Routing specification
   
** Other foundational libraries

   ring middleware
   html templating
   database drivers and orms
   time functions
   validators



** Web Programming with Clojure (contd)
   Programming session
   
** Restful Services with Clojure
   Programming session
   
** HTML Templating library
   Introduction to selmer
   
** REST API library
   
   Introduction to liberator

** State Management in projects
   Mount and Component
   
** Clojurescript introduction (optional)
   
   
** Deployment
   Deploying as a standalone app
   Deploying to tomcat
   Deploying to wildfly (jboss)


